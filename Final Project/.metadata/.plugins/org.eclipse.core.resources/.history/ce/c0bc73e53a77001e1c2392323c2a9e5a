package com.java.jsp;

import java.security.SecureRandom;
import java.util.Random;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

public class PatientDaoImpl implements PatientDao {
    SessionFactory sf;
    Session session;

    @Override
    public String addPatient(Patient patient) {
        sf = SessionHelper.getConnection();
        session = sf.openSession();
        Transaction trans = session.beginTransaction();
        session.save(patient);

        int otp = generateOtp();

        String body = "Welcome to Mr/Miss " + patient.getFirstName() + "\r\n" + "Your OTP Generated Successfully..."
                + "\r\n" + "OTP is " + otp;

        MailSend.mailOtp(patient.getEmail(), "Otp Sent Successfully...", body); 
       
        trans.commit();
        session.close();

        session = sf.openSession();
        Transaction trans2 = session.beginTransaction();

        Login login = new Login();
        login.setUhid(patient.getUhid()); 
        login.setUsername(patient.getUserName());
        login.setOtp(String.valueOf(otp));

        session.save(login);

        trans2.commit();
        session.close();

        return "Welcome.jsp?faces-redirect=true";
    }

    public static String generateOtp(int length) {
        String characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        SecureRandom secureRandom = new SecureRandom();
        StringBuilder otp = new StringBuilder(length);

        for (int i = 0; i < length; i++) {
            int randomIndex = secureRandom.nextInt(characters.length());
            char randomChar = characters.charAt(randomIndex);
            if (Character.isLetter(randomChar)) {
                // Randomly convert to lowercase or keep it uppercase
                if (secureRandom.nextBoolean()) {
                    randomChar = Character.toLowerCase(randomChar);
                }
            }
            otp.append(randomChar);
        }

        return otp.toString();
    }
    This modified method will generate an OTP with both upper and lower case alphanumeric characters while ignoring case. You can call this method with the desired OTP length, such as generateCaseInsensitiveAlphanumericOtp(8) for an 8-character case-insensitive alphanumeric OTP.




    Is this conversation helpful so far?




	   private static int uhidCounter = 1;

	    private static String generateUHID() {
	        // Generate UHID in the format "IN0001", "IN0002", and so on
	        String uhid = String.format("IN%04d", uhidCounter);
	        uhidCounter++;
	        return uhid;
	    }
}
