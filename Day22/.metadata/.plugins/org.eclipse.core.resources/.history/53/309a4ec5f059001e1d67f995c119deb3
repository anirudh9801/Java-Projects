package com.java.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class LibraryDaoImpl implements LibraryDAO {

    Connection connection;
    PreparedStatement pst;

    public boolean checkPassword(String pwd, String retype) {
        if (pwd.equals(retype)) {
            return true;
        }
        return false;
    }

    @Override
    public String createUser(LibUsers libUsers) throws ClassNotFoundException, SQLException {
        connection = ConnectionHelper.getConnection();
        String encPwd = EncryptPassword.getCode(libUsers.getPassWord());
        String cmd = "Insert into LibUsers(UserName, Password) values (?,?)";
        pst = connection.prepareStatement(cmd);
        pst.setString(1, libUsers.getUserName());
        pst.setString(2, encPwd);
        pst.executeUpdate();
        return "User account Created";
    }

    @Override
    public int authenticate(LibUsers libUsers) throws SQLException, ClassNotFoundException {
        connection = ConnectionHelper.getConnection();
        String encr = EncryptPassword.getCode(libUsers.getPassWord());
        String cmd = "select count(*) cnt from LibUsers where userName=? AND Password=?";
        pst = connection.prepareStatement(cmd);
        pst.setString(1, libUsers.getUserName());
        pst.setString(2, encr.trim());
        ResultSet rs = pst.executeQuery();
        rs.next();
        int count = rs.getInt("cnt");
        return count;
    }

    @Override
    public List<Books> searchBooks(String searchType, String searchValue) throws ClassNotFoundException, SQLException {
        String Sql;
        boolean isValid = true;
        if (searchType.equals("id")) {
            Sql = "select * from books where ID=?";
        } else if (searchType.equals("bookname")) {
            Sql = "select * from books where Name=?";
        } else if (searchType.equals("authorname")) {
            Sql = "select * from books where Author=?";
        } else if (searchType.equals("dept")) {
            Sql = "select * from books where Dept=?";
        } else {
            isValid = false;
            Sql = "select * from books";
        }
        connection = ConnectionHelper.getConnection();
        try {
            pst = connection.prepareStatement(Sql);
            if (isValid) {
                pst.setString(1, searchValue);
            }
            ResultSet rs = pst.executeQuery();
            Books books = null;
            List<Books> booksList = new ArrayList<Books>();
            while (rs.next()) {
                books = new Books();
                books.setId(rs.getInt("id"));
                books.setName(rs.getString("name"));
                books.setAuthor(rs.getString("author"));
                books.setEdition(rs.getString("edition"));
                books.setDept(rs.getString("dept"));
                books.setNoOfBooks(rs.getInt("TotalBooks"));
                booksList.add(books);
            }
            return booksList;
        } catch (SQLException e) {
            e.printStackTrace();
            return new ArrayList<Books>();
        }
    }

    @Override
    public String issueBooks(String userName, int bookId) throws SQLException, ClassNotFoundException {
        Connection connection = null;
        PreparedStatement issueStmt = null;
        PreparedStatement updateBooksStmt = null;
        ResultSet resultSet = null;

        try {
            connection = ConnectionHelper.getConnection();
            connection.setAutoCommit(false); // Enable manual transaction control

            // Prepare SQL statements for issuing books and updating book counts
            String issueBookSql = "INSERT INTO TranBook (Username, BookId) VALUES (?, ?)";
            String updateBookCountSql = "UPDATE Books SET TotalBooks = TotalBooks - 1 WHERE Id = ?";
            String returnBookSql = "DELETE FROM TranBook WHERE Username = ? AND BookId = ?";

            issueStmt = connection.prepareStatement(issueBookSql);
            updateBooksStmt = connection.prepareStatement(updateBookCountSql);

            // Check if the book is available (TotalBooks > 0)
            String checkAvailabilitySql = "SELECT TotalBooks FROM Books WHERE Id = ?";
            PreparedStatement checkAvailabilityStmt = connection.prepareStatement(checkAvailabilitySql);
            checkAvailabilityStmt.setInt(1, bookId);
            resultSet = checkAvailabilityStmt.executeQuery();

            if (resultSet.next()) {
                int totalBooks = resultSet.getInt("TotalBooks");

                if (totalBooks > 0) {
                    // Issue the book to the user
                    issueStmt.setString(1, userName);
                    issueStmt.setInt(2, bookId);
                    issueStmt.executeUpdate();

                    // Update the book count
                    updateBooksStmt.setInt(1, bookId);
                    updateBooksStmt.executeUpdate();

                    // Commit the transaction
                    connection.commit();
                    return "Book with ID " + bookId + " has been issued successfully.";
                } else {
                    // Book is not available
                    return "Book with ID " + bookId + " is not available for issuance.";
                }
            } else {
                // Book not found
                return "Book with ID " + bookId + " not found.";
            }
        } catch (SQLException e) {
            // Handle any SQL exceptions and roll back the transaction
            if (connection != null) {
                connection.rollback();
            }
            e.printStackTrace();
            return "Failed to issue the book. Please try again.";
        } finally {
            // Close resources
            if (resultSet != null) {
                resultSet.close();
            }
            if (issueStmt != null) {
                issueStmt.close();
            }
            if (updateBooksStmt != null) {
                updateBooksStmt.close();
            }
            if (connection != null) {
                connection.close();
            }
        }
    }
}
